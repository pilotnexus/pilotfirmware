/* this file is autogenerated */
#include "lora.h"
#include "usart.h"

$model.LORAs:{lora|

static void pilot_$lora.Name$_gpio_init(void)
{
  GPIO_InitTypeDef gpio;

  /* enable gpio clocks */

  /* configure NRESET as Output  */
  gpio.GPIO_Pin = $lora.NResetPin$;
#ifdef STM32F4XX
  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_OType = GPIO_OType_PP;
  gpio.GPIO_PuPd = GPIO_PuPd_UP;
  gpio.GPIO_Speed = GPIO_Speed_100MHz;
#else
  gpio.GPIO_Mode = GPIO_Mode_Out_PP;
  gpio.GPIO_Speed = GPIO_Speed_50MHz;
#endif
  GPIO_Init($lora.NResetGpio$, &gpio);
\}

void pilot_$lora.Name$_set_enable(int enable)
{
  /* enable / disable the lora by pulling NRESET to high / low */
  GPIO_WriteBit($lora.NResetGpio$, $lora.NResetPin$, enable ? Bit_SET : Bit_RESET);
\}

int pilot_$lora.Name$_get_enable()
{
  return GPIO_ReadOutputDataBit($lora.NResetGpio$, $lora.NResetPin$) == Bit_SET ? 1 : 0;
\}

int pilot_$lora.Name$_init(void)
{
  /* initialize the gpios */
  pilot_$lora.Name$_gpio_init();

  /* initialize the usart */
  pilot_$lora.Usart.Name$_init();

  /* configure the usart for lora usage */
  pilot_$lora.Usart.Name$_set_baudrate(9600);

  /* enable the lora */
  //pilot_$lora.Name$_set_enable(1);

  return 0;
\}

int pilot_$lora.Name$_check(void)
{
  return 0;
\}

};separator="\n"$
