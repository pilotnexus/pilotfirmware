/* this file is autogenerated */
#include "gsm.h"
#include "delay.h"

$model.GSMs:{gsm |

static void rpcp_$gsm.Name$_gpio_init_clock()
{
  /* enable gpio clocks for all pins */
#ifdef STM32F4XX
  RCC_AHB$gsm.ResetAHB$PeriphClockCmd(RCC_AHB$gsm.ResetAHB$Periph_$gsm.ResetGpio$, ENABLE);
  RCC_AHB$gsm.PwrOnAHB$PeriphClockCmd(RCC_AHB$gsm.PwrOnAHB$Periph_$gsm.PwrOnGpio$, ENABLE);
#else
  RCC_APB$gsm.ResetAPB$PeriphClockCmd(RCC_APB$gsm.ResetAPB$Periph_$gsm.ResetGpio$, ENABLE);
  RCC_APB$gsm.PwrOnAPB$PeriphClockCmd(RCC_APB$gsm.PwrOnAPB$Periph_$gsm.PwrOnGpio$, ENABLE);
#endif
\}

static void rpcp_$gsm.Name$_gpio_init()
{
  GPIO_InitTypeDef gpio;

  /* configure RESET as Output */
  gpio.GPIO_Pin   = $gsm.ResetPin$;
#ifdef STM32F4XX
  gpio.GPIO_Mode  = GPIO_Mode_OUT;
  gpio.GPIO_OType = GPIO_OType_PP;
  gpio.GPIO_PuPd  = GPIO_PuPd_UP;
  gpio.GPIO_Speed = GPIO_Speed_100MHz;
#else
  gpio.GPIO_Mode  = GPIO_Mode_Out_PP;
  gpio.GPIO_Speed = GPIO_Speed_50MHz;
#endif
  GPIO_Init($gsm.ResetGpio$, &gpio);

  /* configure PWR_ON as Output */
  gpio.GPIO_Pin   = $gsm.PwrOnPin$;
#ifdef STM32F4XX
  gpio.GPIO_Mode  = GPIO_Mode_OUT;
  gpio.GPIO_OType = GPIO_OType_PP;
  gpio.GPIO_PuPd  = GPIO_PuPd_UP;
  gpio.GPIO_Speed = GPIO_Speed_100MHz;
#else
  gpio.GPIO_Mode  = GPIO_Mode_Out_PP;
  gpio.GPIO_Speed = GPIO_Speed_50MHz;
#endif
  GPIO_Init($gsm.PwrOnGpio$, &gpio);
\}

static void rpcp_$gsm.Name$_toggle_power()
{
  /* pull the pwr_on pin down for at least 1 second to toggle on/off state */
  GPIO_WriteBit($gsm.PwrOnGpio$, $gsm.PwrOnPin$, Bit_RESET); /* pull low */
  rpcp_delay_ms(1500);                                       /* wait */
  GPIO_WriteBit($gsm.PwrOnGpio$, $gsm.PwrOnPin$, Bit_SET);   /* pull high */
\}

void rpcp_$gsm.Name$_set_enable(bool enable)
{
  /* first use the reset pin to enable/disable the module */
  GPIO_WriteBit($gsm.ResetGpio$, $gsm.ResetPin$, enable ? Bit_RESET : Bit_SET);

  /* switch the module in the power on state, we need to pull the PWR_ON pin low for a some time */
  if (enable)
  {
    /* toggle power once to power on the device */
    rpcp_$gsm.Name$_toggle_power();
  \}

\}

bool rpcp_$gsm.Name$_get_enable()
{
  return GPIO_ReadOutputDataBit($gsm.ResetGpio$, $gsm.ResetPin$) == Bit_RESET;
\}

void rpcp_$gsm.Name$_init()
{
  /* initialize the gpio clocks */
  rpcp_$gsm.Name$_gpio_init_clock();

  /* initialize the gpios */
  rpcp_$gsm.Name$_gpio_init();

  /* initialize the usart */
  rpc_$gsm.Usart.Name$_init();

  /* configure the usart for gsm usage */
  rpc_$gsm.Usart.Name$_set_baudrate(9600);

  /* enable the gsm */
  //rpcp_$gsm.Name$_set_enable(true);
\}

}; separator = "\n"$
