// import "../grammar/stm.stg"

Header() ::= <<
/*
  this file was auto-generated
*/
>>

IncludeGuardBegin(headerfileName) ::= <<
#ifndef <headerfileName>
#define <headerfileName>
>>

IncludeGuardEnd(headerfileName) ::= <<
#endif
>>

m(name) ::= "m_<name>"

usart_callback(usart) ::= <<
/* gets called by the interrupt handler for <usart.Name> */
void pilot_<usart.Name>_receive()
{
  uint16_t data;

  if (USART_GetITStatus(<usart.Name>, USART_IT_RXNE) != RESET)
  {
    /* receive from the <usart.Name> */
    data = pilot_<usart.Name>_receive_char();

    /* enqueue the data in usart send2rpi queue */
    pilot_comm_enqueue_usart(get_spi_data(target_t_from_module_slot_and_port(<usart.ModuleSlot>, <usart.ModulePort>), data));

    /* pull the DATA pin high to signal available data */
    GPIO_WriteBit(GPIO_Pin_BOARD, GPIO_Pin_DATA_M2R, Bit_SET);
  }
}

>>

senddata(module) ::= <<
>>


Render(model) ::= <<

<Header()>
#include "plc.h"
#include \<limits.h>
#include "stm32_conf.h"
#include "pilot_config.h"
#include "gpio_config.h"
#include "delay.h"
#include "it_callback.h"
#include "ai8.h"
#include "pilot_comm.h"
#include "usart.h"
#include "pwm.h"
#include "i8.h"
#include "o8.h"
#include "demo.h"
#include "pilot_uart.h"
#include "gps.h"
#include "gsm.h"
#include "rtc.h"
#include "counter8.h"
#include "io16.h"
#include "onewire.h"
#include "eeprom.h"
#include "spi.h"
#include "test.h"
#include "fpga.h"
#include "aio20.h"
#include "main.h"
#include "module.h"
#include "printf.h"

IEC_TIMESPEC __CURRENT_TIME;

unsigned long long __tick;

cycletimes_t cycles;


// module info
modules_t module_info;

// hard fault handler in C,
// with stack frame location as input parameter
// called from HardFault_Handler in file xxx.s
void hard_fault_handler_c (unsigned int * hardfault_args)
{
unsigned int stacked_r0;
unsigned int stacked_r1;
unsigned int stacked_r2;
unsigned int stacked_r3;
unsigned int stacked_r12;
unsigned int stacked_lr;
unsigned int stacked_pc;
unsigned int stacked_psr;

stacked_r0 = ((unsigned long) hardfault_args[0]);
stacked_r1 = ((unsigned long) hardfault_args[1]);
stacked_r2 = ((unsigned long) hardfault_args[2]);
stacked_r3 = ((unsigned long) hardfault_args[3]);

stacked_r12 = ((unsigned long) hardfault_args[4]);
stacked_lr = ((unsigned long) hardfault_args[5]);
stacked_pc = ((unsigned long) hardfault_args[6]);
stacked_psr = ((unsigned long) hardfault_args[7]);

printf ("\n\n[Hard fault handler - all numbers in hex]\n");
printf ("R0 = %x\n", stacked_r0);
printf ("R1 = %x\n", stacked_r1);
printf ("R2 = %x\n", stacked_r2);
printf ("R3 = %x\n", stacked_r3);
printf ("R12 = %x\n", stacked_r12);
printf ("LR [R14] = %x  subroutine call return address\n", stacked_lr);
printf ("PC [R15] = %x  program counter\n", stacked_pc);
printf ("PSR = %x\n", stacked_psr);
printf ("BFAR = %x\n", (*((volatile unsigned long *)(0xE000ED38))));
printf ("CFSR = %x\n", (*((volatile unsigned long *)(0xE000ED28))));
printf ("HFSR = %x\n", (*((volatile unsigned long *)(0xE000ED2C))));
printf ("DFSR = %x\n", (*((volatile unsigned long *)(0xE000ED30))));
printf ("AFSR = %x\n", (*((volatile unsigned long *)(0xE000ED3C))));
printf ("SCB_SHCSR = %x\n", SCB->SHCSR);

while (1);
}
/* init systick interrupt */
static void pilot_systick_init()
{
int priority;

/* configure the systick timer interval: 1000 -> 1ms interval */
if (SysTick_Config(SystemCoreClock / 1000))
  while(1); /* capture error */

/* calculate the priority value */
priority = NVIC_EncodePriority(NVIC_PriorityGroup_0, 0, 2);

/* set the priority value of the systick interrupt */
NVIC_SetPriority(SysTick_IRQn, priority);
}

static void pilot_send_startup_message()
{
printf("Pilot firmware version: <model.CodeGen.Version>\r\n");
  printf("Build Date: <model.CodeGen.Date>\r\n");
  #ifdef DEBUG
  printf("DEBUG enabled\r\n");
  #endif
<if (model.IsTest)>
  printf("Test run: enabled\r\n");
<else>
  printf("Test run: disabled\r\n");
<endif>

  /* module usage */
  <model.Modules:{m|printf("m<m.Slot>: <m.Name>\r\n");};separator="\n">

  	printf("Last Reset reason: ");
	  // test the reset flags in order because the pin reset is always set. 
	if (RCC_GetFlagStatus(RCC_FLAG_PORRST)) {
		printf("POR/PDR reset\r\n");
	}
	else if (RCC_GetFlagStatus(RCC_FLAG_SFTRST)) {
		printf("Software reset\r\n");
	}
	else if (RCC_GetFlagStatus(RCC_FLAG_IWDGRST)) {
		printf("Independent watchdog reset\r\n");
	}
	else if (RCC_GetFlagStatus(RCC_FLAG_WWDGRST)) {
		printf("Window watchdog reset\r\n");
	}
	else if (RCC_GetFlagStatus(RCC_FLAG_LPWRRST)) {
		printf("Low-power reset\r\n");
	}
	else if (RCC_GetFlagStatus(RCC_FLAG_PINRST)) {
		printf("PIN reset\r\n");
	}
	else {
		printf("unknown");
	}
}

static void pilot_send_eeprom_uids()
{
  int i; bool presence;
  pilot_eeprom_uid_t uid;
  pilot_eeprom_hid_t hid;

  printf("Module uids:\r\n");
  for (i = 0; i \< MODULES_COUNT; i++)
  {
    /* get the uid */
    presence = pilot_eeprom_get_module_uid((module_slot_t)i, &uid);

    /* get the hid */
    pilot_eeprom_get_module_hid((module_slot_t)i, &hid);

    /* module X: OK*/
    printf("module %d: %s '%.7s'\r\n", i, presence ? "OK" : "  ", hid.data);
  }
}

volatile int module_inputs_changed = -1;
static void pilot_handle_module_inputs_changed()
{
  int slot;

  if (module_inputs_changed > -1)
  {
    slot = module_inputs_changed;

    /* mark the cmd as handled */
    module_inputs_changed = -1;

    switch (slot)
    {
<model.IO16s:{io16|
      case <io16.Slot>:
        pilot_<io16.Name>_set_irq_handled();
        break;
};separator="\n">
    }

    /* send the input changed cmd */
    pilot_comm_send_input_changed((module_slot_t)slot);
  }
}

void initialize_tick()
{
  __tick = 0ULL;

  /* cycle time */
  cycles.cycle_min = UINT_MAX;
}

static void pilot_main_loop(void *state)
{
  uint64_t cycle_start, us=0;
  pilot_cmd_t cmd;

  // plc_state, if watchdog reset occured, don't start the plc loop
  if (RCC_GetFlagStatus(RCC_FLAG_IWDGRST) || RCC_GetFlagStatus(RCC_FLAG_WWDGRST)) 
    pilot_set_plc_state((int32_t)pilot_plc_state_watchdog_reset);
  else
    pilot_set_plc_state((int32_t)pilot_plc_state_run);
  
  RCC_ClearFlag();

  pilot_loop_pre_init();

  while(1)
  {
    //DWT_CycCounterClear();
    cycle_start = GetCycleCount64();

    pilot_loop_head();

    pilot_handle_received_data();
    pilot_handle_module_inputs_changed();

    //communication time
    cycles.cycle_current_comm = GetCycleCount64();

    //if plc is enabled, run plc code
    if (pilot_get_plc_state() == (int32_t)pilot_plc_state_run)
    {
      //read inputs
      plc_read_inputs();
      cycles.cycle_current_read = GetCycleCount64();

      //run code
      us = cycles.cycle_current_read / (<model.ClockSpeed> / 1000000);
      plc_run(state, us);
      cycles.cycle_current_program = GetCycleCount64();

      //write outputs
      plc_write_outputs();
      cycles.cycle_current_write = GetCycleCount64();

      //handle subscriptions
      pilot_comm_send_subscribed_plc_variables(&cmd);
    }
    else 
    {
      cycles.cycle_current_read = cycles.cycle_current_comm;
      cycles.cycle_current_program = cycles.cycle_current_comm;
      cycles.cycle_current_write = cycles.cycle_current_comm;
    }

    pilot_uart_comm(GetCycleCount64(), us);
    
    pilot_loop_tail();
    
    //update cycle time
    cycles.cycle_start = cycle_start; //value is used in pilot_handle_received_data / communication. Save the offset for that.
    cycles.cycle_current = GetCycleCount64() - cycles.cycle_start;
    if (cycles.cycle_min > cycles.cycle_current) cycles.cycle_min = cycles.cycle_current;
    if (cycles.cycle_max \< cycles.cycle_current) cycles.cycle_max = cycles.cycle_current;
  }
}

int main(void)
{
  int init_status = 0;

  /* initialize tick variables */
  initialize_tick();

  /* make sure SystemCoreClock is updated */
  SystemCoreClockUpdate();

  /* enable the systick interrupt */
  pilot_systick_init();

  DWT_Enable(); //activate DWT-unit
  DWT_CycCounterEn(); // enable CPU cycle counter

  /* initializes USART1 for debug messages */
  pilot_usart_init();

  /* initializes raspberry pi spi communication */
  pilot_comm_init();

  /* send a message over rs232 to rpi's /dev/ttyAMA0 */
  pilot_send_startup_message();

  /* initialize communication with the eeproms */
  pilot_eeprom_init();

  /* output the module uids */
  pilot_send_eeprom_uids();

  /* run configuration settings */
  pilot_config_init();

<if(model.SPIs)>
  /* initialize spi */
  pilot_spi_setup();
<endif>

<if(model.Usarts)>
  /* initialize usarts */
  <model.Usarts:{usart|pilot_<usart.Name>_init();};separator="\n">
<endif>

<if(model.Pwms)>
  /* initialize pwms */
  <model.Pwms:{pwm|pilot_<pwm.Name>_init();};separator="\n">
<endif>

  /* init modules */
  pilot_modules_init();

<if(model.IsTest)>
  /* initialize the test */
  pilot_test_init();
<endif>

  //init plc and then start main loop
  plc_internal_init(pilot_main_loop);
}

////////////////////////////////////
// interrupt handler 

/* pilot_systick is called every millisecond */
void pilot_systick()
{
  /* increment tick counter */
  __tick++;
  //__CURRENT_TIME.tv_nsec += 1000000L;
  //if (__CURRENT_TIME.tv_nsec >= 1000000000L)
  //{
  //  __CURRENT_TIME.tv_nsec = 0;
  //  __CURRENT_TIME.tv_sec++;
  //}

  /* increment the timeout counter */
  pilot_comm_increment_cmd_timeout();
}

<if(model.IO16s)>
/* define io16 input changed irq callback */
void pilot_io16_input_changed(int slot)
{
  module_inputs_changed = slot;
}
<endif>

<if(model.Usarts)>
/* define usart receive callback handler */
<model.Usarts:{usart|<usart_callback(usart)>};separator="\n">
<endif>

/* gets called by the interrupt handler when a counter needs to be incremented */
void pilot_counter_increment(int counter)
{
  /* increment the counter */
  <model.counter8s:{counter8|
  pilot_<counter8.Name>_increment_counter(counter);
  };separator="\n">
}

void pilot_spi_transmit_done()
{
  pilot_comm_spi_tx_done();
}

//////////////////////////////////////

>>
