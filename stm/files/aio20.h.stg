//import "../grammar/stm.stg"

IncludeGuardBegin(headerfileName) ::= <<
#ifndef <headerfileName>
#define <headerfileName>
>>

IncludeGuardEnd(headerfileName) ::= <<
#endif
>>

Header() ::= <<
/*
  this file was auto-generated
*/
>>

Render(model) ::= <<

<Header()>
<IncludeGuardBegin(model.HeaderfileName)>

<RenderBody(model)>

<IncludeGuardEnd(model.HeaderfileName)>

>>

m(name) ::= "m_<name>"

/* declares the aio20 functions */
AIO20(aio20) ::= <<

/* initializes the aio20 module */
int pilot_<aio20.Name>_init(void);
int pilot_<aio20.Name>_check(void);
int pilot_<aio20.Name>_set_irq_handled(void);
>>

RenderBody(model) ::= <<

#include \<stdbool.h>
#include "io_stm.h"
#include "common_base.h"
#include "MAX11300Hex.h"

<! functions foreach fpga module !>
<model.AIO20s:{aio20|<AIO20(aio20)>};separator="\n">

   ///MAX11300 Ports
    typedef enum MAX11300_Ports
    {
        PIXI_PORT0,
        PIXI_PORT1,
        PIXI_PORT2,
        PIXI_PORT3,
        PIXI_PORT4,
        PIXI_PORT5,
        PIXI_PORT6,
        PIXI_PORT7,
        PIXI_PORT8,
        PIXI_PORT9,
        PIXI_PORT10,
        PIXI_PORT11,
        PIXI_PORT12,
        PIXI_PORT13,
        PIXI_PORT14,
        PIXI_PORT15,
        PIXI_PORT16,
        PIXI_PORT17,
        PIXI_PORT18,
        PIXI_PORT19
    } MAX11300_Ports;
    
    ///MAX11300 Port Modes
    typedef enum MAX11300_Port_Modes
    {
        ///HIGH_Z
        MODE_0,
        ///Digital input with programmable threshold, GPI 
        MODE_1,
        ///Bidirectional level translator terminal
        MODE_2,
        ///Register-driven digital output with DAC-controlled level, GPO
        MODE_3,
        ///Unidirectional path output with DAC-controlled level, GPO 
        MODE_4,
        ///Analog output for DAC
        MODE_5,
        ///Analog output for DAC with ADC monitoring
        MODE_6,
        ///Positive analog input to single-ended ADC
        MODE_7,
        ///Positive analog input to differential ADC
        MODE_8,
        ///Negative analog input to differential ADC
        MODE_9,
        ///Analog output for DAC and negative analog input to differential ADC
        MODE_10,
        ///Terminal to GPI-controlled analog switch
        MODE_11,
        ///Terminal to register-controlled analog switch
        MODE_12
    } MAX11300_Port_Modes;
    
    typedef enum CmdResult
    {
        ///Failed operation
        OpFailure, 
        ///Successful operation
        Success 
    } CmdResult;
    
    static const uint16_t MODE_BITMASK_PROCESS_1 = 0x047A;
    
    static const uint16_t MODE_BITMASK_PROCESS_2 = 0x0380;
    
    static const uint16_t MODE_BITMASK_PROCESS_3 = 0x1804;
    
    ///@brief Writes given register with data
    ///@param[in] reg - register to be written
    ///@param[in] data - data to write
    ///@return none
    void write_register(uint8_t slot, MAX11300RegAddress_t reg, uint16_t data);
    
    ///@brief Reads given register
    ///@param[in] reg - register to read
    ///@return contents of register
    uint16_t read_register(uint8_t slot, MAX11300RegAddress_t reg);
    
    ///@brief Writes a block of data starting at given register
    ///@param[in] reg - register to start writing at
    ///@param[in] data - pointer to data buffer
    ///@param[in] num_reg - number of registers to be written
    ///@return none
    void block_write(uint8_t slot, MAX11300RegAddress_t reg, uint16_t * data, uint8_t num_reg);
    
    ///@brief Reads a block of data starting at given register
    ///@param[in] reg - register to start reading at
    ///@param[in] data - pointer to data buffer
    ///@param[in] num_reg - number of registers to be read
    ///@return none
    void block_read(uint8_t slot, MAX11300RegAddress_t reg, uint16_t * data, uint8_t num_reg);
    
    ///@brief Writes gpo configured port with lsb of state
    ///@param[in] port - gpo congigured port to be written
    ///@param[in] state - lsb of state is written to port
    ///@return Result of operation 
    CmdResult gpio_write(uint8_t slot, MAX11300_Ports port, uint8_t state);
    
    ///@brief Reads gpi configured port
    ///@param[in] port - gpi congigured port to be read
    ///@param[out] state - lsb of state matches port state
    ///@return Result of operation 
    CmdResult gpio_read(uint8_t slot, MAX11300_Ports port, uint8_t *state);
    
    ///@brief Read single ended ADC configured port
    ///@param[in] port - single ended ADC configured port
    ///@param[out] data - contents of ADC data register
    ///@return Result of operation
    CmdResult single_ended_adc_read(uint8_t slot, MAX11300_Ports port, uint16_t *data);
    
    int single_ended_adc_read_all(uint8_t slot, uint8_t *data); 
    
    ///@brief Write single ended DAC configured port
    ///@param[in] port - single ended DAC configured port
    ///@param[in] data - value to be written to DAC data register
    ///@return Result of operation
    CmdResult single_ended_dac_write(uint8_t slot, MAX11300_Ports port, uint16_t data);

    void AIO20_init(uint8_t slot);
    uint16_t aio20_get_device_id(uint8_t slot);
>>

 